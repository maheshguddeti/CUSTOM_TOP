#!/bin/ksh
# /*********************************************************************************************************
# * NAME : XXRSARAUDPUT.prog                                                                               *
# *                                                                                                        *
# * DESCRIPTION : Rackspace Account Updater Outbound Move & Archive Program                                *
# *                                                                                                        *
# * AUTHOR       : Sai Manohar                                                                             *
# * DATE WRITTEN : 04-JAN-2012                                                                             *
# *                                                                                                        *
# * CHANGE CONTROL :                                                                                       *
# * Ver#  | REF#         | WHO             |   DATE      | REMARKS                                         *
# *--------------------------------------------------------------------------------------------------------*
# * 1.0.0 | 111122-02448 | Sai Manohar     | 04-JAN-2012 | R12 code                                        *
# *********************************************************************************************************/
# $Header: XXRSARAUDPUT.prog  1.0.0 04-JAN-2012 10.00AM Sai Manohar $ 
echo "-----------------------------------------------------------------------"
echo "Start of Script."
echo "-----------------------------------------------------------------------"
echo " "
#
# ----------------------------------------------------------------------------
# The upload directory is always derived from responsibility 
# ----------------------------------------------------------------------------
#
p_apps_usrn_pwd=$1
p_user_id=$2
p_user_name=$3
p_conc_request_id=$4
v_upload_dir=`eval echo "${5}"`
v_ssh_key=`eval echo "${6}"`
user_id=`eval echo "${7}"`
pid=`eval echo "${8}"`
date=`date +%Y%m%d`
l_env=`echo $TWO_TASK | awk '{print substr($0,0,3)}'`
#
echo "-----------------------------------------------------------------------"
echo "Parameters being passed from Oracle Concurrent Job:"
echo " "
echo "Path               = "$0
echo "User Id            =  ${p_user_id}"
echo "User Name          =  ${p_user_name}"
echo "Request ID         =  ${p_conc_request_id}"
echo "Environment        =  ${l_env}"
echo "ssh Key            =  ${v_ssh_key}"
echo "chase user id      =  ${user_id}"
echo "pid                =  ${pid}"

#
filedate=`date '+%C%y%m%d'`
#
requestid=`sqlplus -silent ${p_apps_usrn_pwd} <<EOF
SET HEAD OFF
SELECT fcr.request_id
FROM fnd_concurrent_requests fcr,
     fnd_concurrent_programs fcp,
     fnd_concurrent_programs_tl fcpt
WHERE fcp.concurrent_program_id = fcr.concurrent_program_id
  AND fcp.application_id = fcr.program_application_id
  AND fcpt.concurrent_program_id = fcp.concurrent_program_id
  AND fcpt.application_id = fcp.application_id
  AND fcpt.language = USERENV('LANG')
  AND fcp.concurrent_program_name = 'XXRSARAUDDC'
  AND fcr.parent_request_id IN (SELECT fcr_sibling.request_id
                                FROM fnd_concurrent_requests fcr_sibling
                                WHERE fcr_sibling.parent_request_id = (SELECT fcr_parent.parent_request_id
                                                                       FROM fnd_concurrent_requests fcr_parent
                                                                       WHERE fcr_parent.request_id = (SELECT fcr_current.parent_request_id
                                                                                                      FROM fnd_concurrent_requests fcr_current
                                                                                                      WHERE fcr_current.request_id = ${p_conc_request_id}
                                                                                                     )
                                                                      )
                               )
;
EXIT;
EOF`
#
  requestid=`echo ${requestid}|tr -s "" " "`
#
  echo " "
  echo 'Request ID of Account Updater Outbound FILE: ' ${requestid}
  echo " "
#
  pid=`echo ${pid}|tr -s "" " "`
#
  filename=`echo ${pid}.${filedate}${requestid}|tr '[A-Z]' '[a-z]'|tr -s "" " "`
#
#
  user_id=`echo ${user_id}|tr -s "" " "`
#
# -----------------------------------------------------------------------------------------
# Keep files in $V_UPLOAD_DIR for a day and cleanup the directory. This is required before the if 
# condition in order to avoid any confusion in getting the output file.
#
# Check the output directory to find if the report is generated.
# if yes, then copy the output file to the $UPLOAD_DIR
# -----------------------------------------------------------------------------------------
#
  find ${v_upload_dir}/ -ctime +0 -name 'xxrs*aud*.*' -exec rm {} \;

  if [ -f ${APPLCSF}/${APPLOUT}/XXRSARAUD_${requestid}_1.ETEXT ]; then
#
if [ $l_env = "PRD" ]; then  
    perl -pe 's/\r\n|\n|\r/\r\n/g'  ${APPLCSF}/${APPLOUT}/XXRSARAUD_${requestid}_1.ETEXT >> ${v_upload_dir}/${filename}.txt
    cp ${v_upload_dir}/${filename}.txt ${XXRS_TOP}/archive/ar/globalgateway/request
    gpg -e --default-recipient 'B4EDFEBE' ${v_upload_dir}/${filename}.txt
    rm -f ${APPLCSF}/${APPLOUT}/XXRSARAUD_${requestid}_1.ETEXT
    rm -f ${APPLCSF}/${APPLOUT}/o${requestid}*.out
    echo $?
else
    perl -pe 's/\r\n|\n|\r/\r\n/g'  ${APPLCSF}/${APPLOUT}/XXRSARAUD_${requestid}_1.ETEXT >> ${v_upload_dir}/${filename}.txt
    cp ${v_upload_dir}/${filename}.txt ${XXRS_TOP}/archive/ar/globalgateway/request
    cp ${v_upload_dir}/${filename}.txt ${XXRS_TOP}/data/upload/AR/US
    gpg -e --default-recipient 'E7912770' ${v_upload_dir}/${filename}.txt
    rm -f ${APPLCSF}/${APPLOUT}/XXRSARAUD_${requestid}_1.ETEXT
    rm -f ${APPLCSF}/${APPLOUT}/o${requestid}*.out
    echo $?
fi
#
# -----------------------------------------------------------------------------------------
# copy extract file to Global Gateway server using SFTP 
# copy only if instance is PRD otherwise do not copy file to PRD  
# -----------------------------------------------------------------------------------------
#
if [ $l_env = "PRD" ]; then 
cd ${v_upload_dir}
sftp -oIdentityFile=$HOME/.ssh/${v_ssh_key} ${user_id}@netconnectbatch1.chasepaymentech.net<< EOF_FTP
put ${filename}.txt.gpg
EOF_FTP
  if (($? != 0))     # Examine error status
  then
      echo "---------------------------------------------------------------------------------"
      echo "Trying to Connect to Fallback Paymentech Server netconnectbatch2.chasepaymentech.net"
      cd ${v_upload_dir}
sftp -oIdentityFile=$HOME/.ssh/${v_ssh_key} ${user_id}@netconnectbatch2.chasepaymentech.net<< EOF_FTP
put ${filename}.txt.gpg
EOF_FTP
  fi
#
else
#
cd ${v_upload_dir}
cp  ${filename}.txt.gpg $XXRS_TOP/data/upload/AR/US
sftp -oIdentityFile=$HOME/.ssh/${v_ssh_key} ${user_id}@netconnectbatchvar1.chasepaymentech.net<< EOF_FTP
put ${filename}.txt.gpg
ls -la
EOF_FTP
  if (($? != 0))     # Examine error status
  then
      echo "---------------------------------------------------------------------------------"
      echo "Trying to Connect to Fallback Paymentech Server netconnectbatchvar2.chasepaymentech.net"
      cd ${v_upload_dir}
sftp -oIdentityFile=$HOME/.ssh/${v_ssh_key} ${user_id}@netconnectbatchvar2.chasepaymentech.net<< EOF_FTP
put ${filename}.txt.gpg
ls -la
EOF_FTP
  fi
fi
#
      if (($? != 0))
      then
        print " Error placing file on chase server "
#
        echo "---------------------------------------------------------------------------------"
        echo "Output file "${filename}.txt.gpg "is located at "${v_upload_dir}
        echo "Generated File Need to be Transferred manually to Chase"
        exit 1
#
     else
       echo 'File Successfully Placed on Chase Server' 
#
# -----------------------------------------------------------------------------------------
# Copy the file from the output directory to Archive directory and then
# encrypt and zip the file
# -----------------------------------------------------------------------------------------
#
   if [ $l_env = "PRD" ]; then 
    gpg -e --default-recipient "OracleDBA" ${XXRS_TOP}/archive/ar/globalgateway/request/${filename}.txt
   else
    gpg -e --default-recipient AD788575 ${XXRS_TOP}/archive/ar/globalgateway/request/${filename}.txt
   fi
    gzip ${XXRS_TOP}/archive/ar/globalgateway/request/${filename}.txt.gpg
# 
# -----------------------------------------------------------------------------------------
# Remove the original file from the archive directory and data
# -----------------------------------------------------------------------------------------
#
    rm -f $XXRS_TOP/archive/ar/globalgateway/request/${filename}.txt
#
    rm -f $XXRS_TOP/data/ar/globalgateway/request/${filename}.txt.gpg
#
    echo "---------------------------------------------------------------------------------"
    echo "Output file ${filename} is located at "${XXRS_TOP}/archive/ar/globalgateway/request
    echo " "
#
    echo "---------------------------------------------------------------------------------"
    echo "File Transferred Successfully"
    echo "---------------------------------------------------------------------------------"
    echo " "

  fi
#
#
# -----------------------------------------------------------------------------------------
# gzip archive/globalgateway/request/${filename}.xml.gpg
# -----------------------------------------------------------------------------------------
#
    find ${XXRS_TOP}/archive/ar/globalgateway/request/ -ctime +120 -name '*gpg*gz' -exec rm {} \;

  else
    echo "---------------------------------------------------------------------------------"
    echo "Output file generated by concurrent program is not found."
    echo "---------------------------------------------------------------------------------"
    echo " "
  exit 1
  fi